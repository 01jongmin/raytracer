use std::fs::File;
use std::io::{Write};
mod ray;
mod vec3;
use vec3::Vec3;
use ray::Ray;

fn ray_color(ray: &Ray) -> Vec3 {
    let t = hit_sphere(Vec3::new(0., 0., -1.), 0.5, ray);

    if t > 0. {
        let normal = (ray.at(t) - Vec3::new(0., 0., -1.)).unit_vector();
        return Vec3::new(normal.x() + 1., normal.y() + 1., normal.z() + 1.) * 0.5;
    }

    let unit_direction = ray.direction().unit_vector();
    let t = (unit_direction.y() + 1.0) * 0.5;

    Vec3::new(1.0, 1.0, 1.0) * (-t + 1.0) + Vec3::new(0.5, 0.7, 1.0) * t
}

fn hit_sphere(center: Vec3, radius: f64, ray: &Ray) -> f64 {
    let oc = ray.origin() - center;
    let a = ray.direction().length_squared();
    let half_b = Vec3::dot(&oc, &ray.direction());
    let c = oc.length_squared() - radius * radius;
    let discriminant = half_b * half_b - a * c;
    if discriminant < 0. {
        -1.0
    } else {
        (-half_b - discriminant.sqrt()) / a
    }
}

fn main() -> std::io::Result<()> {
    let filename = "linear_interpolatidon_v1.ppm";

    // width over height
    let aspect_ratio = 16.0 / 9.0;
    let image_width = 400;
    let image_height = (image_width as f64 / aspect_ratio) as i64;

    let viewport_height = 2.0;
    let viewport_width = aspect_ratio * viewport_height;
    let focal_length = 1.0;

    let origin = Vec3::constant_new(0.);
    let horizontal = Vec3::new(viewport_width, 0., 0.);
    let vertical = Vec3::new(0., viewport_height, 0.);

    let lower_left_corner = origin - horizontal / 2. - vertical / 2. - Vec3::new(0., 0., focal_length);

    let mut buffer = File::create(filename)?;
    write!(&mut buffer, "P3\n{} {}\n255\n", image_width, image_height)?;

    for row in (0..image_height).rev() {
        for col in 0..image_width {
            let u = col as f64 / (image_width - 1) as f64;
            let v = row as f64 / (image_height - 1) as f64;
            
            let ray = Ray::new(origin, lower_left_corner + horizontal * u + vertical * v - origin);

            let color = ray_color(&ray);
            write!(&mut buffer, "{:?}", color)?;
        }
    }

    Ok(())
}
